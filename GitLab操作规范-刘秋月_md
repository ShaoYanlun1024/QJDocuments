## GitLab开发使用规范

---

### 一、开发流程
&emsp;&emsp;开发的版本管理仓库，目前我们使用的GitLab，可以有效的管理我们的代码版本，以及开发进度的管理。但是，由于使用规范的问题，导致很多项目管理较乱，所以，现在出一版GitLab的使用规范以及管理规范，具体流程如下：
#### 1. 确定项目参与人员，新建项目群组，分配权限。
&emsp;&emsp;确定好项目参与人员以后，由质控组建立项目群组，然后将人员拉进群组，并且建立各个项目，需求、设计、web端、小程序、Java端。
- 项目负责人是主程序员权限，并且是可以拥有群组的整个权限；
- 项目组开发人员根据项目，分配在群组内的项目中，并且分配开发人员权限；
- 测试人员在群组中分配报告者权限；
- 需求和设计在各自的需求项目以及设计项目中分配主程序员权限。
#### 2. 上传项目，并且建立分支
- 主程序员上传项目，并且建立各分支。
- Java以及Web项目建立3个分支，分别是:
  - master
  - dev
  - release
- 小程序建立两个分支：
  - dev
  - release
#### 3. 开发时，在本地建立分支。(这里差一步里程碑的建立)
- 在开发过程中，开发人员根据自己分配到的功能，在本地建立一个以功能命名的分支，进行开发(这里要关联里程碑)。
- 开发完成后，先切换到dev分支拉取线上代码，如果拉取的代码有变更，就在本地先跟自己的分支进行合并，并且解决冲突，然后在上传本地分支到远程仓库(GitLab)。
- 上传之后建立合并请求。  
[合并步骤](http://git.allhome.com.cn/xiaoyueyue/GitLab_Description/raw/master/designator.png)
  - 标题名称写功能简述，最好是关联里程碑进度。
  - 合并代码指派人选择项目负责人，比较分支没问题后，进行合并。
  - 如果功能开发完成，就将本分支进行删除。
#### 4. 一个里程碑开发完成后，合并dev代码到master分支。(这里差一步跑单元测试)
&emsp;&emsp;完成一个里程碑之后，需要质控组介入进行项目测试，主程序员将dev分支的代码提交合并申请到master分支，指派人选择负责项目部署的运维人员，标题和描述写上当前阶段完成的功能，关联里程碑。
#### 5. 测试通过后，合并master分支的代码到release分支
&emsp;&emsp;测试人员完成测试，没有需要解决的bug了，就提交master分支的代码到release分支，指派人指向当前项目的运维人员，由运维人员发布到正式生产环境。
### 二、 修复Bug流程
&emsp;&emsp;项目开发完成一个里程碑后，项目负责人提交合并申请到master分支，由质控组介入，进行测试。这时测试人员会将bug提到iusses上，开发人员针对iusses上的问题，进行bug修复，具体流程如下：
#### 1. 项目负责人根据bug指派人员进行修复。
&emsp;&emsp;项目负责人可以选择将iusses指派人员进行修复。
#### 2. 本地建立与Bug相关联的分支。
- 本地建立分支，分支名称的命名以iusses编号为主，例如：BUG_001、BUG_101等。
- 对要修改的iusses问题，需要改变一下标签状态，例如：将要解决的bug，标签选择To Do，正在解决的bug，标签选择Doing等。  
[标签改变方式](http://git.allhome.com.cn/xiaoyueyue/GitLab_Description/raw/master/tagStatus.png)
- 完成一个bug的修复，在建立一个分支，修复别的bug。全都改完之后，统一提交到远程仓库(GitLab)。
- 提交版本之前，先拉取一下dev分支的代码，然后与本地分支进行合并，解决冲突，在进行提交
- bug修复完成，在GitLab上提交合并申请到dev分支，标题要关联你修改的bug编号。  
[编号查看位置](http://git.allhome.com.cn/xiaoyueyue/GitLab_Description/raw/master/question.png)  
[bug分支合并要填写的数据](http://git.allhome.com.cn/xiaoyueyue/GitLab_Description/raw/master/bug.png)
- 提交完合并申请之后，在iusses中修改一下标签状态，选择已解决。  
#### 3. 项目负责人根据bug修复情况，合并dev分支的代码到master分支。