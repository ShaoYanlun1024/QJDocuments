# Redis规范

整理 | 版本 | 日期 | 描述
--- | --- | --- | ---  
徐章壹、廖海龙、孙靖武 | 0.0.1 | 2019.05.27 | 初稿


## 一、键值设计
- key 名设计 

   以业务名 (或数据库名) 为前缀 (防止 key 冲突)，用冒号分隔，比如业务名: 表名:id 
   ```
   例: ugc:video:1 
   ```
   保证语义的前提下，控制 key 的长度，当 key 较多时，内存占用也不容忽视 
   ```
   user:{uid}:friends:messages:{mid}简化为 u:{uid}:fr:m:{mid} 
   ```
   > 不要包含特殊字符,比如空格、换行、单双引号以及其他转义字符 

   > 拒绝 bigkey(防止网卡流量、慢查询)

- value 设计 

   string 类型控制在 10KB 以内，hash、list、set、zset 元素个数不要超过 5000 

   根据业务场景合理使用不同的数据结构类型 
   ```
   例：String可以用作普通的K-V、计数类；Hash可以用作对象如商品、经纪人等，包含较多属性的信息；List可以用作消息队列、粉丝/关注列表等；Set可以用于推荐；Sorted Set可以用于排行榜等 
   ```
   > 控制数据大小，防止出现慢查询，或者数据进行压缩

- key 生命周期 
   ```
   控制key的生命周期，redis 不是垃圾桶 
   建议使用 expire 设置过期时间 (条件允许可以打散过期时间，防止集中过期)，不过期的数据重点关注 idletime
   数据一致性，明确业务规则；结合业务场景采用合理的一致性解决方案，避免数据不一致
   ```
## 二、存储
- 冷热数据分离，不要将所有数据全部都放到Redis中
   ```
   虽然Redis支持持久化，但是Redis的数据存储全部都是在内存中的，成本昂贵。建议根据业务只将高频热数据存储到Redis中，对于低频冷数据可以使用MySQL/ElasticSearch等基于磁盘的存储方式，不仅节省内存成本，而且数据量小在操作时速度更快、效率更高
   ```

## 三、操作注意
- 批量操作可以使用pipeline 
   ```
   Pipeline在某些场景下非常有用，比如有多个命令需要被“及时的”提交，而且他们对相应结果没有互相依赖，
   对结果响应也无需立即获得，那么pipeline就可以充当这种“批处理”的工具；而且在一定程度上，可以较大的提升性能， 
   性能提升的原因主要是TCP连接中减少了“交互往返”的时间(需要控制每次命令的数量)
   ```
- 线上Redis及代码中禁止使用Keys正则匹配操作
   ```
   Redis是单线程处理，在线上KEY数量较多时，操作效率极低， 
   该命令一旦执行会严重阻塞线上其它命令的正常请求，而且在高QPS情况下会直接造成Redis服务崩溃 
   如果有类似需求，请使用scan命令代替
   ```
